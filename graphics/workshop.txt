[h1]Basic template engine for scripts[/h1]

[b]Important[/b] If you installed an earlier version, there was an issue with the static Program constructor that may cause issues in your saves. Update immediately to fix this - if you have issues with your save files, contact me here or on github and I will help to resolve the issue.

A basic templating engine which allows you to register callbacks, and replace templates with data on the fly

see the [url=https://github.com/p-mcgowan/se-scripts/tree/master/template]template script on github[/url] for more info - will likely not maintain both readmes...

Makes use of this graphics script:
[url=https://steamcommunity.com/sharedfiles/filedetails/?id=2314207214]sprite graphics[/url]

And is used in this ship status script (some good examples there):
[url=https://steamcommunity.com/sharedfiles/filedetails/?id=2314209066]ShipStatus (workshop)[/url]


[h1]Usage[/h1]
The Main function shows a demo template, and how to register handlers.
The engine has a few built in methods such as text, bar, circle, and a few others.

The template variable pattern looks like:
[code]
{some-keyword-here}
[/code]

Which will call the method registered to the keyword "some-keyword-here". For example, [code]{text::This is my message}[/code] will write text to the screen

The full variable pattern is as follows:
[code]
{?<name>:<options>:<text>}
[/code]

The leading "?" will disable the automatic newline the engine inserts (good for conditional spacing).
<name> is the name of a registered method
<options> is a list of key=value pairs separated by semicolons (;), which is passed to the callback in a dictionary
<text> is any raw text to be rendered. Note that above we used [code]{text:: <- double colon here }[/code] to tell the engine that no options were provided

Using the example below:

[code]
This is a test {no.registered.method}
This is another line, below is
a registered method returning Random
{test.random:min=0;max=10}

---------------------------------
{?test.spacing}
---------------------------------
{text::this line has text}
---------------------------------
demo bar: {bar:bgColour=red;textColour=100,100,100;fillColour=blue;pct=0.63:asdf text}

<
{?test.cdtnl:c=dimyellow:this text will print when random succeeds}
>

{text:colour=0,0,100:i'm blue, abadee abadaa}
{text:colour=red:some like it red}
[/code]

The template will render the image above (all in the Main demo method).

[h1]Api listing[/h1]
The template includes these built in methods:

[table]
[tr][th]template var name[/th][th]Options[/th][th]Description[/th][/tr]
[tr][td]config[/td][td]font: set the font
size: set the font size
textPadding: set the padding
colour: set the text colour
bgColour: set the background colour[/td][td]Configure the display (only runs once)[/td][/tr]
[tr][td]text[/td][td]text: string of text
colour: <colour argument> (see below)
textAlignment: "center", "left", "right"
scale: a numeric scale factor[/td][td]basic text rendering[/td][/tr]
[tr][td]textCircle[/td][td]colour: <colour argument>
outline: if true, will not fill the circle[/td][td]a small circle inline with text[/td][/tr]
[tr][td]circle[/td][td]size: numeric size in pixels
colour: <colour argument>
outline: if true, will not fill the circle[/td][td]a basic circle shape[/td][/tr]
[tr][td]bar[/td][td]pct: percent value from 0 to 1 (eg 0.24)
width: width in pixels (default to width of screen or space left on line)
height: height in pixels (defaults to text height)
fillColour: <colour argument>
text: string of text
textColour: <colour argument>
bgColour: <colour argument>
textAlignment: "center", "left", "right"
pad: percentage padding (defaults to 0.1)[/td][td]a percent bar[/td][/tr]
[tr][td]midBar[/td][td]net: plus or minus number
low: positive lowest value (will be used with net / low)
high: positive highest value (will be used with net / high)
width: width in pixels (default to width of screen or space left on line)
height: height in pixels (defaults to text height)
pad: percentage padding (defaults to 0.1)
bgColour: <colour argument>[/td][td]a bar which accepts low, high, and a signed value, where negative will show red and positive will show green[/td][/tr]
[tr][td]multiBar[/td][td]values: a list of floats, separated by underscores (eg `0.1_0.4_0.2`)
colours: a list of <colour argument>, separated by underscores (eg `red_yellow_0,0,0,0.5`)
width: width in pixels (default to width of screen or space left on line)
height: height in pixels (defaults to text height)
text: text content
textColour: <colour argument>,
bgColour: <colour argument>,
[/td][td]Similar to bar, but showing multiple levels of colours[/td][/tr]
[/table]

<colour argument>; Either a string colour name, or RGB or RGBA values
eg: "red", "255,0,0,200"
supported colour names:
black blue brown cyan dimgray gray green orange pink purple red tan transparent white yellow dimgreen dimyellow dimorange dimred
